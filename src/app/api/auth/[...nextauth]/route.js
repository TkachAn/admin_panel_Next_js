//src/app/api/[...nextauth]/route.js

// src/app/api/auth/[...nextauth]/route.js
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import bcrypt from 'bcrypt';
import query from '@/app/lib/db';

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        pass: { label: 'Password', type: 'password' },
      },

      async authorize(credentials) {
        const { email, pass } = credentials;
        console.log('–í—Ö–æ–¥—è—â–∏–µ –∫—Ä–µ–¥–µ–Ω—à–µ–ª—ã:', credentials);

        const result = await query(
          'SELECT * FROM users WHERE email = ? LIMIT 1',
          [email]
        );

        if (!result || result.length === 0) {
          console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return null;
        }

        const user = result[0];
        console.log('–ò–∑ –ë–î (—Ö—ç—à):', user.pass);
        console.log('–í–≤–µ–¥–µ–Ω–æ (plain):', pass);

        const isValid = await bcrypt.compare(pass, user.pass);
        if (!isValid) {
          console.log('–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–ª');
          return null;
        }

        return {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role,
        };
      },
    }),
  ],
  pages: {
    signIn: '/auth',
    error: '/auth',
  },
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.role = user.role;
      }
      return token;
    },
    async session({ session, token }) {
      session.user.id = token.id;
      session.user.role = token.role;
      return session;
    },
  },
  secret: process.env.NEXTAUTH_SECRET || 'super-secret',
});

export { handler as GET, handler as POST };


/*
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import bcrypt from 'bcrypt'
import query from '@/app/lib/db';

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        pass: { label: 'Password', type: 'password' },
      },

      async authorize(credentials) {
        const { email, pass } = credentials;
      
        console.log('–í—Ö–æ–¥—è—â–∏–µ –∫—Ä–µ–¥–µ–Ω—à–µ–ª—ã:', credentials);
      
        const result = await query(
          'SELECT * FROM users WHERE email = ? LIMIT 1',
          [email]
        );
      
        if (!result || result.length === 0) {
          
          return null;
        }
      
        const user = result[0];
        console.log('–ò–∑ –ë–î:', user.pass);
        console.log('–í–≤–µ–¥–µ–Ω–æ:', pass);
      
        if (user.pass !== pass) {
          console.log('–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–ª');
          return null;
        }
      
        return {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role,
        };
      },
      

     /* async authorize(credentials) {
        const { email, pass } = credentials;

        const users = await query("SELECT * FROM users WHERE email = ? LIMIT 1", [email]);
        if (!users.length) return null;

        const user = users[0];
        if (user.pass !== pass) return null;

        return {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role,
        };
      },*/
 /*   }),
  ],
  pages: {
    signIn: '/auth',
    error: '/auth',
  },
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.role = user.role;
      }
      return token;
    },
    async session({ session, token }) {
      session.user.id = token.id;
      session.user.role = token.role;
      return session;
    },
  },
  secret: process.env.NEXTAUTH_SECRET || 'super-secret',
});

export { handler as GET, handler as POST };


/*
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import query from '@/app/lib/db'; // –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–≤–æ—é –æ–±—ë—Ä—Ç–∫—É

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        pass: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        const { email, pass } = credentials;
        console.log('–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
        console.log('–í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', pass);
        // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        const users = await query("SELECT * FROM users WHERE email = ? LIMIT 1", [email]);
        if (!users.length) return null;

        const user = users[0];

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ —Ö—ç—à–∞)
        if (user.pass !== pass) return null;

        return {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role,
        };
      },
    }),
  ],
  pages: {
    signIn: '/auth',
    error: '/auth',
  },
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.role = user.role;
      }
      return token;
    },
    async session({ session, token }) {
      session.user.id = token.id;
      session.user.role = token.role;
      return session;
    },
  },
  secret: process.env.NEXTAUTH_SECRET || 'super-secret',
});

export { handler as GET, handler as POST };


/*
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        pass: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        const { email, pass } = credentials;
        const root_login = process.env.ROOT_USER;
        const root_pass = process.env.ROOT_PASS;

        console.log("root_login",root_login);
        console.log("root_pass",root_pass);

        // üîê –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (email === 'admin@i.ua' && pass === 'admin'|| email === root_login && pass === root_pass ) {
          return { id: 1, name: 'Admin', email };
        }

        return null; // –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –æ—à–∏–±–∫–∞
      },
    }),
  ],
  pages: {
    signIn: '/auth', // —á—Ç–æ–±—ã –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–ª —Ç–≤–æ–π –ª–æ–≥–∏–Ω, –∞ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    error: '/auth',  // –º–æ–∂–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ —Ç—É–¥–∞ –∂–µ
  },
  session: {
    strategy: 'jwt', // –∏–ª–∏ 'database' ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω—É–∂–¥
  },
  secret: process.env.NEXTAUTH_SECRET, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ .env
});

export { handler as GET, handler as POST };*/
