'use client';
import React, { useState, useEffect } from "react";
import { format } from "date-fns";
import { ru } from "date-fns/locale";
import { NormButton } from "@/elem/buttons/buttons";
import { TextInput } from "@/elem/inputs/inputs";
import styles from "./plot.module.css";

const PlotDataTable = () => {
  const [data, setData] = useState([]);
  const [totalRecords, setTotalRecords] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [searchNumber, setSearchNumber] = useState("");
  const [searchOwner, setSearchOwner] = useState("");
  const [selectedPlot, setSelectedPlot] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const isFiltered = searchNumber.trim() !== "" || searchOwner.trim() !== "";
  const fileName = isFiltered ? "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–ø–æ–∫–∞–∑–∞–Ω–∏—è" : "–ø–æ—Å–ª–µ–¥–Ω–∏–µ_–ø–æ–∫–∞–∑–∞–Ω–∏—è";

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const res = await fetch(
          `/api/plotData?page=${currentPage}&pageSize=10&plotNumber=${searchNumber}&ownerName=${searchOwner}`
        );
        const result = await res.json();
        setData(result.data);
        setTotalRecords(result.totalRecords);
        setTotalPages(result.totalPages);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [currentPage, searchNumber, searchOwner]);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleRowClick = (plot) => {
    setSelectedPlot(plot);
  };

  const formatDate = (date) => {
    return format(new Date(date), "dd.MM.yyyy", { locale: ru });
  };

  const filteredData = data.filter((item) => {
    return (
      item.plot_number.toLowerCase().includes(searchNumber.toLowerCase()) &&
      item.owner_name.toLowerCase().includes(searchOwner.toLowerCase())
    );
  });

  const downloadExcel = async () => {
    let exportData = [];

    if (isFiltered) {
      const res = await fetch(
        `/api/exportExcel?plotNumber=${searchNumber}&ownerName=${searchOwner}`
      );
      exportData = await res.json();
    } else {
      const res = await fetch(`/api/lastReadings`);
      const json = await res.json();
      exportData = json.data;
    }

    if (!exportData || exportData.length === 0) {
      alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.");
      return;
    }

    const headers = ["–£—á–∞—Å—Ç–æ–∫", "–í–ª–∞–¥–µ–ª–µ—Ü", "–î–∞—Ç–∞", "–∫–í—Ç/—á", "–°—á—ë—Ç—á–∏–∫", "–∑–∞–º–µ—á–∞–Ω–∏—è"];
    const rows = exportData.map((item) => [
      item.plot_number,
      item.owner_name,
      formatDate(item.readings_date),
      item.readings,
      item.serial_number,
      item.history_note || ""
    ]);

    const csvContent = [headers, ...rows]
      .map((row) => row.map((v) => `"${v}"`).join(","))
      .join("\n");

    const blob = new Blob([csvContent], { type: "text/csv; charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.setAttribute("download", `${fileName}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className={styles.wrapper}>
      <div className={styles.filters}>
        <TextInput
          label="–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞"
          placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 15-–ë"
          value={searchNumber}
          onChange={(e) => setSearchNumber(e.target.value)}
        />
        <TextInput
          label="–§–∞–º–∏–ª–∏—è –∏–Ω–∏—Ü–∏–∞–ª—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞"
          placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò. –ò."
          value={searchOwner}
          onChange={(e) => setSearchOwner(e.target.value)}
        />
      </div>

      <div className={styles.tableContainer}>
        <table className={styles.table}>
          <thead>
            <tr>
              <th className={styles.u}>–£—á–∞—Å—Ç–æ–∫</th>
              <th>–í–ª–∞–¥–µ–ª–µ—Ü</th>
              <th className={styles.dd}>–î–∞—Ç–∞</th>
              <th className={styles.rr}>–∫–í—Ç/—á</th>
              <th>–°—á—ë—Ç—á–∏–∫</th>
              <th>–∑–∞–º–µ—á–∞–Ω–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {(isFiltered ? filteredData : data).length > 0 ? (
              (isFiltered ? filteredData : data).map((item, index) => (
                <tr key={index} onClick={() => handleRowClick(item)}>
                  <td className={styles.u}>{item.plot_number}</td>
                  <td>{item.owner_name}</td>
                  <td className={styles.d}>{formatDate(item.readings_date)}</td>
                  <td className={styles.r}>{item.readings}</td>
                  <td>{item.serial_number}</td>
                  <td>{item.history_note}</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="6">–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td>
              </tr>
            )}
          </tbody>
        </table>

        <div className={styles.pagination}>
          <NormButton
            status={currentPage === 1 ? "blocked" : "normal"}
            onClick={() => handlePageChange(currentPage - 1)}
            children="–ù–∞–∑–∞–¥"
          />
          <span>
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
          </span>
          <NormButton
            status={currentPage === totalPages ? "blocked" : "normal"}
            onClick={() => handlePageChange(currentPage + 1)}
            children="–í–ø–µ—Ä—ë–¥"
          />
        </div>

        {selectedPlot && (
          <div className={styles.historyBlock}>
            <h3>–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∫–∞ {selectedPlot.plot_number}</h3>
            <div>–ó–∞–≥–ª—É—à–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∫—Ä–∞—Å–∏–≤–æ üõ†Ô∏è</div>
          </div>
        )}

        <div className={styles.buttons}>
          <NormButton onClick={downloadExcel}>
            {isFiltered ? "–°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è" : "–°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è"}
          </NormButton>
          <NormButton children={"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É"} />
        </div>
      </div>
    </div>
  );
};

export default PlotDataTable;


//'use client';
/*
import React, { useState, useEffect } from "react";
import { format } from "date-fns";
import { ru } from "date-fns/locale"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
import { NormButton } from "@/elem/buttons/buttons";
import { NoteInput, TextInput } from "@/elem/inputs/inputs";
import styles from "./plot.module.css"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CSS-–º–æ–¥—É–ª—å

const mockPlots = [
  { id: 1, number: "12–ê", owner: "–ò–≤–∞–Ω–æ–≤", reading: 1325 },
  { id: 2, number: "15–ë", owner: "–ü–µ—Ç—Ä–æ–≤–∞", reading: 1280 },
  { id: 3, number: "3–í", owner: "–°–∏–¥–æ—Ä–æ–≤", reading: 1410 },
];

const PlotDataTable = () => {
  const [data, setData] = useState([]);
  const [totalRecords, setTotalRecords] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [plots, setPlots] = useState(mockPlots);
  const [filteredPlots, setFilteredPlots] = useState(mockPlots);
  const [searchNumber, setSearchNumber] = useState("");
  const [searchOwner, setSearchOwner] = useState("");
  const [selectedPlot, setSelectedPlot] = useState(null);

  useEffect(() => {
    const filtered = plots.filter((plot) => {
      return (
        plot.number.toLowerCase().includes(searchNumber.toLowerCase()) &&
        plot.owner.toLowerCase().includes(searchOwner.toLowerCase())
      );
    });
    setFilteredPlots(filtered);
  }, [searchNumber, searchOwner, plots]);

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch(
        `/api/plotData?page=${currentPage}&pageSize=10`
      );
      const result = await response.json();
      setData(result.data);
      setTotalRecords(result.totalRecords);
      setTotalPages(result.totalPages);
    };
    fetchData();
  }, [currentPage]);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (–¥–µ–Ω—å.–º–µ—Å—è—Ü –≥–æ–¥)
  const formatDate = (date) => {
    return format(new Date(date), "dd.MM yyyy", { locale: ru });
  };


  return (
    <div className={styles.wrapper}>
      <div className={styles.filters}>
        <TextInput label="–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞"
          placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 15-–ë"
          value={searchNumber}
          onChange={(e) => setSearchNumber(e.target.value)}
        />
         <TextInput
          label="–§–∞–º–∏–ª–∏—è –∏–Ω–∏—Ü–∏–∞–ª—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞"
          placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò. –ò."
          value={searchOwner}
          onChange={(e) => setSearchOwner(e.target.value)}
        />
      </div>
      <div className={styles.tableContainer}>
        <table className={styles.table}>
          <thead>
            <tr>
              <th className={styles.u}>–£—á–∞—Å—Ç–æ–∫</th>
              <th>–í–ª–∞–¥–µ–ª–µ—Ü</th>
              <th className={styles.dd}>–î–∞—Ç–∞</th>
              <th className={styles.rr}>–∫–í—Ç/—á</th>
              <th>–°—á—ë—Ç—á–∏–∫</th>
              <th>–∑–∞–º–µ—á–∞–Ω–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {data.length > 0 ? (
              data.map((item, index) => (
                <tr key={index}>
                  <td className={styles.u}>{item.plot_number}</td>
                  <td>{item.owner_name}</td>
                  <td className={styles.d}>{formatDate(item.readings_date)}</td>
                  <td className={styles.r}>{item.readings}</td>
                  <td>{item.serial_number}</td>
                  <td>{item.history_note}</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="7">–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td>
              </tr>
            )}
          </tbody>
        </table>

      
        <div className={styles.pagination}>
          <NormButton
            status={currentPage === 1 ? "blocked" : "normal"}
            onClick={() => handlePageChange(currentPage - 1)}
            children="–ù–∞–∑–∞–¥"
          />
          <span>
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
          </span>
          <NormButton
            status={currentPage === totalPages ? "blocked" : "normal"}
            onClick={() => handlePageChange(currentPage + 1)}
            children="–í–ø–µ—Ä—ë–¥"
          />
        </div>
        {selectedPlot && (
        <div className={styles.historyBlock}>
          <h3>–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∫–∞ {selectedPlot.number}</h3>
          <div>–ó–∞–≥–ª—É—à–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∫—Ä–∞—Å–∏–≤–æ üõ†Ô∏è</div>
        </div>
      )}

      
    </div>
    <h5>–°–∫–∞—á–∞—Ç—å Excel</h5>
      <div className={styles.buttons}>
       
        <NormButton  children={"–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è"}/>
        
      </div>
      <div className={styles.buttons}>
       
        <NormButton  children={"–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}/>
        
      </div>
      <div className={styles.buttons}>
        <NormButton children={"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É"}/>
       
      </div>
    </div>
  );
};

export default PlotDataTable;
*/

  /*
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)
  const formatTime = (date) => {
    return format(new Date(date), 'HH:mm');
  };*/